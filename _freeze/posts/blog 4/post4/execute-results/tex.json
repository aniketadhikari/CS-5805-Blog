{
  "hash": "f53e17822c79318ad82addc5bd0a56b9",
  "result": {
    "markdown": "---\ntitle: \"Anomaly/Outlier Detection\"\nsubtitle: \"Using Python to Detect Anomalies/Outliers\"\nauthor: \"Aniket Adhikari\"\ndate: \"2023-11-23\"\ndate-modified: \"2023-11-23\"\ntoc: true\ntoc-title: \"On this page\"\ncode-line-numbers: true\nhighlight-style: dracula\nformat:\n  html:\n    embed-resources: true\n    code-tools: true\n  pdf:\n    colorlinks: true\n---\n\nAnomaly detection, or outlier detection, is a machine learning process of detecting abnormal or rare observations in data that stick out from the rest of the data. Typically, outliers are data points that appear far away from other observations, meaning they differ greatly from the majority of the data\n\n# Importance of Anomalies \n\n**Improves Model Accuracy**\n\nOutliers can adversely effect model predictions if they aren't handled. Models might overfit to outliers and lead to reduced generalization on unseen data. Removing outliers can help to improve model accuracy and prevent misleading models. \n\n**Reduce Risks of Bad Decisions **\n\nOutlier driven misleading models can result in incorrect data interpretations and decisions. Furthermore, outliers can influence decision-making processes in various domains, from finance to healthcare. Properly handling outliers ensures that decisions are based on accurate and representative information.\n\n**Identify Cost-saving Opportunities**\n\nAnalyzing positive outliers can reveal best practices and improvement opportunities leading to greater efficiencies. Likewise, negative outliers may show problems needing addressing.\n\n# Anomaly/Outlier Detection in Practice?\n\n**Fraud Detection in Finance** $\\rightarrow$ Identifying transactions, claims, or activity that is suspicious and does not conform to regular patterns\n\n* Track credit card fraud \n* Detect money laundering\n* Detect unusual trading patterns in stock markets \n\n**Health Care** $\\rightarrow$ Monitoring patient data for anomalies\n\n* Disease detection based on electrocardiogram (ECG) readings\n* Uncover irregularities in medical imaging for cancer detection \n\n**Cybersecurity** $\\rightarrow$ Detecting unsual activity or malicious traffic on computer networks\n\n* Detect network intrusion\n* Prevent data exfiltration attempts \n* Enhance cybersecurity measures\n\n**Manufacturing and Quality Control** $\\rightarrow$ Finding defects in manufacturing\n\n* Prevention of defective products from reaching consumers\n* Reduce waste \n* Maintain product quality\n\n**Energy and Utilities Consumption** $\\rightarrow$ Finding anomalies in energy consumption patterns \n\n* Identify power grid failures \n* Identify abnormal usage\n* Determine equipment malfunctions\n* Ensure reliable service delivery \n\n# Types of Outliers \n\n## Visualization \n\n* Use of scatter plots, box plots, histogram distributions \n* Allows for visual inspection to find anomalies \n\n## Standard Deviation\n\n* Thresholds based on standard deviations from the mean\n* Z-score calculates how far away observatoin are from the mean in terms of standard deviatoin \n\n## Percentiles \n\n* Declare observations below X percentile or above Y percentile as outliers \n* Less sensitive to outliers than standard deviation\n\n## Distance-Based \n\n* Mahalanobis, Euclidean, Manhattan distances\n* Mark points too far from general cluster\n\n## Density-Based\n\n* Find low density regions using algorithms like Local Outlier Factor\n* Isolation Forests isolate anomalies\n\n## Classification-Based\n\n* Train classification models to label outliers\n* Supervised models so need tagged historical data\n\n## Time Series Specific \n\n* Treat long term trends, seasonality before applying outlier detection\n* Use statistical process control charts\n\n# Example of Anomaly Detection in Python\n\nin this example, I'll be using the Pokemon dataset and try to find outliers in total attack and total defense. This can be useful for identifying Pokemon that are exceptionally weak or strong and then trying to trade for them in Pokemon GO. Unlike my prior posts, I would like to show the data that supports my visualizations. This means I'll show how outliers are found when looking at data as well as the visuals.\n\nWe start off by importing the necessary libraries, `pandas`, `matplotlib.pyplot`, and `seaborn`. \n\n`pandas` will be used for creating the necessary DataFrames of total attack and total defense. `matplotlib.pyplot` will be used to create the subplots. `seaborn` will be used to specifically create boxplots. Boxplots are a type of diagram that is really helpful in showing how data is distributed. \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n```\n:::\n\n\nI can bring in the data from the Pokemon dataset and create columns that show total attack and total defense. \n\nTotal attack will be the sum of attack and special attack. Total defense will be the sum of defense and special defense.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata = pd.read_csv('../../datasets/pokemon.csv')\ndata['Total Attack'] = data['attack'] + data['sp_attack']\ndata['Total Defense'] = data['defense'] + data['sp_defense']\n```\n:::\n\n\nHere I created a shorthand for refering to total attack and total defense.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntotal_attack = data['Total Attack']\ntotal_defense = data['Total Defense']\n```\n:::\n\n\nA good way to see how outliers can be found is by looking at the statistics associated with the data, such as:\n\n* the number of data points (`count`)\n* the average of the data points (`mean`)\n* the standard deviation for the data (`std`)\n* the minimum data point (`min`)\n* the 25th percentile (`25%`)\n* the 50th percentile (`50%` or `median`)\n* the 75th percentile (`75%`)\n* the maximum data point (`max`) \n\n First off, we can look at the statistics for total attack.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntotal_attack.describe()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/aniketadhikari/anaconda3/envs/homl3/lib/python3.10/site-packages/IPython/core/formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &  Total Attack \\\\\n\\midrule\ncount &    801.000000 \\\\\nmean  &    149.163546 \\\\\nstd   &     53.357844 \\\\\nmin   &     20.000000 \\\\\n25\\%   &    110.000000 \\\\\n50\\%   &    145.000000 \\\\\n75\\%   &    180.000000 \\\\\nmax   &    360.000000 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nWe can then look at the statistics for total defense\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntotal_defense.describe()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/aniketadhikari/anaconda3/envs/homl3/lib/python3.10/site-packages/IPython/core/formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &  Total Defense \\\\\n\\midrule\ncount &     801.000000 \\\\\nmean  &     143.920100 \\\\\nstd   &      51.308855 \\\\\nmin   &      35.000000 \\\\\n25\\%   &     104.000000 \\\\\n50\\%   &     140.000000 \\\\\n75\\%   &     178.000000 \\\\\nmax   &     460.000000 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nBelow is how we determine outliers in boxplots. \n\nWe start off by getting the upper and lower level quartiles, which are the 75th and 25th percentiles of the data, respectively. \n\n`attack_q1`, or the 25th percentile, is $110.0$ and `attack_q3`, or the 75th percentile, is $180.0$. \n\nWe also have to get the median and interquartile range. interquartile range, or IQR, is determined by subtracting the 25th percentile from the 75th percentile. The difference would be $180 - 110=70$. \n\nAfter that, IQR is used to form the \"whiskers\" of the box plot. The lower whisker is calculated by subtracting $\\text{IQR} * 1.5$ from the lower quartile. This is $110 - 70*1.5=5$. The upper whisker is calculated by adding $\\text{IQR} * 1.5$ to the upper quartiler. This is $180+70*1.5=285$\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nattack_q1 = total_attack.quantile(.25)\nattack_q3 = total_attack.quantile(.75)\n\nattack_median = total_attack.median()\n\nattack_iqr = attack_q3 - attack_q1\n\nattack_min_whisker = attack_q1 - 1.5 * attack_iqr\nattack_max_whisker = attack_q3 + 1.5 * attack_iqr\n```\n:::\n\n\nAfter getting the calculations, we can create a DataFrame that is based on some conditions.\n\nWe filter the data so that we get any points where `total_attack` is greater than the upper whisker. In addition, we want to get any data points where `total_attack` is less than the lower whisker. \n\nAs a result of these conditional filters, we get 12 different Pokemon which satisfy these conditions. This means 12 Pokemon are identified as anomalies. \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nattack_outliers = data[(total_attack > attack_max_whisker) | (total_attack < attack_min_whisker)].sort_values('Total Attack')\nattack_outliers[['name', 'Total Attack']]\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/aniketadhikari/anaconda3/envs/homl3/lib/python3.10/site-packages/IPython/core/formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n\\begin{tabular}{llr}\n\\toprule\n{} &       name &  Total Attack \\\\\n\\midrule\n256 &   Blaziken &           290 \\\\\n380 &     Latios &           290 \\\\\n444 &   Garchomp &           290 \\\\\n645 &     Kyurem &           290 \\\\\n657 &   Greninja &           298 \\\\\n680 &  Aegislash &           300 \\\\\n718 &    Diancie &           320 \\\\\n381 &     Kyogre &           330 \\\\\n382 &    Groudon &           330 \\\\\n719 &      Hoopa &           330 \\\\\n149 &     Mewtwo &           344 \\\\\n383 &   Rayquaza &           360 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nWe can do the same thing for total defense to get outliers. From this, we get 10 Pokemon that are identified as anomalies.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndefense_q1 = total_defense.quantile(.25)\ndefense_q3 = total_defense.quantile(.75)\n\ndefense_median = total_defense.median()\n\ndefense_iqr = defense_q3 - defense_q1\n\ndefense_min_whisker = defense_q1 - 1.5 * defense_iqr\ndefense_max_whisker = defense_q3 + 1.5 * defense_iqr\n\ndefense_outliers = data[(total_defense > defense_max_whisker) | (total_defense < defense_min_whisker)].sort_values('Total Defense')\ndefense_outliers[['name', 'Total Defense']]\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/aniketadhikari/anaconda3/envs/homl3/lib/python3.10/site-packages/IPython/core/formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=tex}\n\\begin{tabular}{llr}\n\\toprule\n{} &       name &  Total Defense \\\\\n\\midrule\n747 &    Toxapex &            294 \\\\\n475 &  Probopass &            295 \\\\\n376 &   Regirock &            300 \\\\\n377 &     Regice &            300 \\\\\n378 &  Registeel &            300 \\\\\n702 &    Carbink &            300 \\\\\n410 &  Bastiodon &            306 \\\\\n305 &     Aggron &            310 \\\\\n207 &    Steelix &            325 \\\\\n212 &    Shuckle &            460 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nFinally, I wanted to visualize both these sets of data. The top box diagram represents the total attack. The outliers are shown and appear as if there are only 7 outliers when there are actually 12. This is simply because there is some overlap between some data points. \n\nThe bottom box diagram represents the total defense and has the same issue with the data points overlapping. \n\nThis is an important lesson in not depending solely on visualizations and supplementing it with the actual data.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfig, axs = plt.subplots(2, 1, figsize=(10, 10))\n\nsns.boxplot(x=total_attack, ax=axs[0], fliersize=3, flierprops={\"marker\": \"o\"}, color=\"seagreen\")\nsns.boxplot(x=total_defense, ax=axs[1], fliersize=3, flierprops={\"marker\": \"o\"}, color=\"indianred\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<AxesSubplot:xlabel='Total Defense'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](post4_files/figure-pdf/cell-10-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "post4_files/figure-pdf"
    ],
    "filters": []
  }
}