{
  "hash": "30047e133f1dd250f4a67a099067ffbd",
  "result": {
    "markdown": "---\ntitle: \"Linear and nonlinear regression\"\nsubtitle: \"Using Python to Differentiate Linear and Non-Linear Regression\"\nauthor: \"Aniket Adhikari\"\ndate: \"2023-11-15\"\ndate-modified: \"2023-11-17\"\ntoc: true\ntoc-title: \"On this page\"\n---\n\nRegression analysis is a powerful statistical method for estimating the relationship between a dependent and independent variable. Regression analysis leverages historical data to make predictions and comes in 2 forms: linear and non-linear regression.\n\n<u>Side note</u>: an **independent variable** is the value that affects the outcome of a dependent variable and is often referred to as the explanatory variable because it explains the reason for a certain outcome, or **dependent variable**. Dependent variables are usually represented by $y$ and independent varaibles are represented by $x$. \n\n# Linear Regression\n## What is Linear Regression\nLinear regression is the more commonly used regression technique and assumes that there is a linear relationship between the independent variable ($x$) and dependent variable ($y$). Linear regression features a *best-fitting line*, which is a straight line that goes through all of the data points and it determined by minimizing the residual sum of squares (RSS) between the predicted and actual values. The general equation for linear regression looks like this: \n\n$Y = mx + b$\n\n* $y =$ dependent variable\n* $m =$ slope of the line\n* $x =$ independent variable\n* $b =$ slope intercept\n\n## Importance of Linear Regression \nWith the use of linear regression, we have a relatively simple and easy-to-interpret formula for making predictions based on historical data. As a result, it is heavily used in industries such as: \n\n**Finance**\n\nUsing past financial statements, economic indicators, and historical prices to predict: \n\n* Predicting stock prices\n* Predicting bond yields\n* Predicting future exchange rates\n\n**Economics**\n\nUsing information like policy changes, taxes, and spending to predict:\n\n* GDP\n* Inflation\n* Unemployment Rates \n\n**Sports**\n\nUsing past team/player performance and rankings to predict:\n\n* Outcome of games\n* Make power rankings for teams \n* Come up with betting lines \n* Future player performance\n\n**Transportation**\n\nUsing weight, distance, route, and fuel costs to predict:\n\n* Transportation costs\n* Delivery times \n* Gas consumption \n\n## Requirements for Linear Regression\n\n* Make sure to use a scatterplot to quickly determine whether there is a linear relationship between 2 variables. Even though there might be a relationship between 2 variables, we have to ensure that the relationship is truly linear. Otherwise, the variables might be better suites for a non-linear regression, which I'll talk about later.\n* Remove outliers that may disproportionately influence the regression line\n* Independent variables should be scaled/standardized to have a normal distribution\n* Dependent variable should be a continuous numeric variable\n\n## Simple Linear Regression\nSimple linear regression is used to model the linear relationship between a single independent variable and a dependent variable.\n\nWe start off by importing the required libraries, including the `LinearRegression` package.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import required libraries\nimport numpy as np \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n```\n:::\n\n\nWe import a dataset that aggregates a World Happiness Report, which is a survey of the state of global happiness. It contains surveyed information regarding 156 countries around the world and their overall happiness. Additionally, it contains information like` GDP per capita`, `Social support`, `Healthy life expectancy`, `Freedom to make life choices`, `Generosity`, and `Perceptions of corruption`. Information from here can be used to inform policy-making decisions.\n\nIn our case, we want to see how much do these listed factors influence overall happiness.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata = pd.read_csv(\"../../datasets/happiness_report.csv\")\n```\n:::\n\n\nSo which one of these factors might be interesting to look like? I thought it might be interesting to look at how `GDP per capita`, `Social support`, `Healthy life expectancy`, and `Freedom to make life choices` potentially influence the `Score`. \n\nAs a result, we're going to create DataFrames for each of these columns of data that we want to designate as independent variables:\n\n1. `gdp` represents `GDP per capita`\n2. `social_support` represents `Social support`\n3. `life_expectancy` represents `Healthy life expectancy`\n4. `freedom` represents `Freedom to make life chocies`\n\nWe also need to create a DataFrame for the `Score` column so that we can designate it as a dependent variable.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# x values\ngdp = data['GDP per capita'].values.reshape(-1, 1)\nsocial_support = data['Social support'].values.reshape(-1, 1)\nlife_expectancy = data['Healthy life expectancy'].values.reshape(-1, 1)\nfreedom = data['Freedom to make life choices'].values.reshape(-1, 1)\n# y values\nscore = data['Score'].values\n```\n:::\n\n\nI wanted to do a linear regression model that examine the effects of GDP per capita on happiness score. \n\nTo do this, we have to create a LinearRegression object that we can assign to `gdpModel`. This object can then be used to fit two arrays, `gdp` and `score`. This is done using the `fit()` method, which fits the 2 arrays based on minimizing the sum of squared residuals. From there, we can use the model to make predictions of what the `score` values will be based on `gdp` values. The values are stored into `gdp_predict_score`. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ngdpModel = LinearRegression()\n\ngdpModel.fit(gdp, score)\n\ngdp_predict_score = gdpModel.predict(gdp)\n```\n:::\n\n\nWe repeat this process to that examines the effects of\n\n* `Social support`\n* `Healthy life expectancy`\n* `Freedom to make life choices`\n\nupon `Score`\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsocialSupportModel = LinearRegression()\n\n# Train the model\nsocialSupportModel.fit(social_support, score)\n\n# Make predictions\nsocial_support_predict_score = socialSupportModel.predict(social_support)\nlifeExpectancyModel = LinearRegression()\n\n# Train the model\nlifeExpectancyModel.fit(life_expectancy, score)\n\n# Make predictions\nlife_expectancy_predict_score = lifeExpectancyModel.predict(life_expectancy)\nfreedomModel = LinearRegression()\n\n# Train the model\nfreedomModel.fit(freedom, score)\n\n# Make predictions\nfreedom_predict_score = freedomModel.predict(freedom)\n```\n:::\n\n\nNow that we have the predictions for each of the independent variables, we can plot the data and run a best-fit line.\n\n In this example, I wanted to create subplots so I could show the relationship between all 4 independent variables with `score` The first subplot is a scatterplot showing the relationship between `GDP per capita` and `Score`. The data is first scattered on the grid and then we run a best-fit line through this data. This line shows predictions of the `score` based on `GDP per capita`, with the assumption that their relationship is linear. We then create subplots for all of the other relationships and label them with the appropriate titles.\n\n All of them seem to have a positive relationship, meaning as the independent value $x$ increases, the dependent values $y$ also increases\n\nfig, axs = plt.subplots(2, 2, figsize=(9, 4.5), tight_layout=True)\n\naxs[0, 0].scatter(gdp, score, c=\"g\")\naxs[0, 0].plot(gdp, gdp_predict_score, c=\"r\")\naxs[0, 0].set_title(\"Affect of GDP on Happiness\")\n\naxs[1, 0].scatter(social_support, score,  c=\"m\")\naxs[1, 0].plot(social_support, social_support_predict_score, c=\"r\")\naxs[1, 0].set_title(\"Affect of Social Support on Happiness\")\n\naxs[0, 1].scatter(life_expectancy, score, c=\"y\")\naxs[0, 1].plot(life_expectancy, life_expectancy_predict_score, c=\"r\")\naxs[0, 1].set_title(\"Affect of Life Expectancy on Happiness\")\n\naxs[1, 1].scatter(freedom, score, c=\"c\")\naxs[1, 1].plot(freedom, freedom_predict_score, c=\"red\")\naxs[1, 1].set_title(\"Affect of Freedom on Happiness\")\n\nplt.show()\n```\n\n\n# Non-linear Regression\n## What is Non-Linear Regression\nNon-linear regression is a regression technique that assumes non-linear relationship between one or more independent variables and a dependent variable. This assumption allows for more complex relationships to be modeled that can't be modeled with the straight line in linear regression. \n\n",
    "supporting": [
      "post3_files"
    ],
    "filters": [],
    "includes": {}
  }
}